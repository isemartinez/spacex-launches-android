package com.spacex.launches.data.models.local

import androidx.room.Entity
import androidx.room.ForeignKey
import androidx.room.PrimaryKey

/**
 * Represents a launch core entity stored in the local Room database.
 * This entity is used to store data related to the core (the reusable first stage of a SpaceX rocket) for a specific launch.
 * It is linked to the `LaunchEntity` via a foreign key.
 *
 * @property id The unique ID of the launch core (autogenerated by Room).
 * @property launchId The ID of the associated launch, which acts as a foreign key referencing the `LaunchEntity`.
 * @property core The ID of the rocket core.
 * @property flight The number of flights this core has completed.
 * @property gridfins Whether the core has grid fins.
 * @property legs Whether the core has landing legs.
 * @property reused Whether the core is reused.
 * @property landingAttempt Whether there was a landing attempt.
 * @property landingSuccess Whether the landing was successful.
 * @property landingType The type of landing (e.g., ASDS, RTLS).
 * @property landpad The ID of the landing pad.
 */
@Entity(
    tableName = "launch-cores",
    foreignKeys = [ForeignKey(
        entity = LaunchEntity::class,
        parentColumns = ["id"],
        childColumns = ["launchId"],
        onDelete = ForeignKey.CASCADE
    )]
)
internal data class LaunchCoreEntity(
    @PrimaryKey(autoGenerate = true) val id: Long = 0,
    val launchId: Long,
    val core: String?,
    val flight: Int?,
    val gridfins: Boolean?,
    val legs: Boolean?,
    val reused: Boolean?,
    val landingAttempt: Boolean?,
    val landingSuccess: Boolean?,
    val landingType: String?,
    val landpad: String?
)
